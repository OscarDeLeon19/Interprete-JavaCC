options {
  IGNORE_CASE = false;
  STATIC = false;
}

PARSER_BEGIN(Gramatica)
/** Analizador de expresiones aritmeticas sencillas. */
package Analizador; 

import expresiones.Logica;
import expresiones.Operacion;
import expresiones.Relacional;
import salida.Salida;
import tabla.Tipo;
import instrucciones.Instruccion;
import instrucciones.Declaracion;
import instrucciones.Imprimir;
import expresiones.Valor;
import instrucciones.Funcion;
import java.util.ArrayList;
import instrucciones.Asignacion;
import instrucciones.Retorno;
import instrucciones.Llamada;
import instrucciones.Si;
import instrucciones.Para;
import instrucciones.Iteracion;
import instrucciones.Mientras;
import instrucciones.Detener;
import instrucciones.Continuar;

public class Gramatica {
    
    Salida salida = new Salida();

    public void setSalida(Salida salida){
        this.salida = salida;
    }

}
PARSER_END(Gramatica)

MORE :
{
    "\"" :STRING_STATE
}

TOKEN : {
      <ENTERO: (["0"-"9"])+>
    | <DECIMAL: (["0"-"9"])+"."(["0"-"9"])+>
    | <TRUE: "true">    
    | <FALSE: "false">
    | <CADENA: "cadena">
    | <INT: "int">
    | <VOID: "void">
    | <DOUBLE: "double">
    | <BOOLEAN: "boolean">
    | <IMPRIMIR: "imprimir">
    | <PARA: "para">
    | <MIENTRAS: "mientras">
    | <FUNCION: "funcion">
    | <RETORNO: "retorno">
    | <DETENER: "detener">
    | <CONTINUAR: "continuar">
    | <SI: "si">
    | <SINO: "sino">
    | <PCOMA: ";">
    | <PARIZ: "(">
    | <PARDE: ")">
    | <CORI: "[">
    | <CORD: "]">
    | <LLAVE_I: "{">
    | <LLAVE_D: "}">
    | <MAS: "+">
    | <MENOS: "-">
    | <POR: "*">
    | <DIV: "/">
    | <IGUAL: "=">
    | <MENORQUE: "<">
    | <MAYORQUE: ">">
    | <MENORIGUAL: "<=">
    | <MAYORIGUAL: ">=">
    | <IGUALACION: "==">
    | <DIFERENCIACION: "!=">
    | <COMA: ",">
    | <AND: "&&">
    | <OR: "||">
    | <NOT: "!" >
    | <INCREMENTO: "++" >
    | <DECREMENTO: "--" >
    | <IDENTIFICADOR: ["a"-"z","A"-"Z", "_"] ( ["a"-"z","A"-"Z", "_"] | ["0"-"9"] )* >
    
}

SKIP : {
      " "
    | "\t"
    | "\r"
    | "\n"
    | <"//" (~["\n", "\r"])*> {System.out.println("Comentario");}
    | <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
    | <(~[])> {System.out.println("error");}

}

<STRING_STATE> MORE:
{
    <~["\""]>
}

<STRING_STATE> TOKEN:
{
   <STRING:"\""> : DEFAULT 
}

void Analizar():
{Instruccion ins; }
{
    (ins = Instruccion() {salida.agregarInstruccion(ins);})+ <EOF>
}
Instruccion Instruccion() :
{Instruccion e;}
{
    e = Declaracion() {return e;}
    | e = Asignacion() {return e;}
    | e = Funcion() {return e;}
}

Instruccion InstruccionFuncion() :
{Instruccion e;}
{
    e = Declaracion() {return e;}
    | e = Imprimir() {return e;}
    | e = Asignacion() {return e;}
    | e = Retorno() {return e;}
    | e = Si() {return e;}
    | e = Para() {return e;}
    | e = Mientras() {return e;}
}

Instruccion Mientras():
{Instruccion e; ArrayList<Instruccion> cuerpoCiclo = new ArrayList<Instruccion>();}
{
    <MIENTRAS> <PARIZ> e = Expresion() <PARDE> cuerpoCiclo = BloqueCiclo()
    {return new Mientras(e, cuerpoCiclo, token.beginLine, token.beginColumn, Tipo.MIENTRAS);}
}

Instruccion Para():
{Instruccion d; Instruccion e; Iteracion i; ArrayList<Instruccion> cuerpoCiclo = new ArrayList<Instruccion>();}
{
    <PARA> <PARIZ> d = DeclaracionCiclo() <PCOMA> e = Expresion() <PCOMA> i = Aumentar() <PARDE> cuerpoCiclo = BloqueCiclo()
    {return new Para(Tipo.PARA, (Declaracion) d, e, i, cuerpoCiclo, token.beginLine, token.beginColumn);}
}

Instruccion DeclaracionCiclo():
{Tipo t; Token tok; Instruccion e;}
{
    t = Tipo() tok = <IDENTIFICADOR> <IGUAL> e = Expresion() {return new Declaracion(Tipo.DECLARACION,tok.image, e, t, tok.beginLine, tok.beginColumn);}
}

Iteracion Aumentar():
{}
{
    <INCREMENTO> {return new Iteracion(Tipo.INCREMENTO, token.beginLine, token.beginColumn, Tipo.ITERACION);}
    | <DECREMENTO> {return new Iteracion(Tipo.DECREMENTO, token.beginLine, token.beginColumn, Tipo.ITERACION);}
}

ArrayList<Instruccion> BloqueCiclo():
{ArrayList<Instruccion> instrucciones = new ArrayList<Instruccion>(); Instruccion e;}
{
  <LLAVE_I> (e=InstruccionCiclo() {instrucciones.add(e);})* <LLAVE_D> {return instrucciones;}
}

Instruccion InstruccionCiclo() :
{Instruccion e;}
{
    e = Declaracion() {return e;}
    | e = Imprimir() {return e;}
    | e = Asignacion() {return e;}
    | e = Si() {return e;}
    | e = Para() {return e;} 
    | e = Mientras() {return e;}
    | e = Detener() {return e;}
    | e = Continuar() {return e;}
}

Instruccion Detener():
{Instruccion e;}
{
    <DETENER> <PCOMA> {return new Detener(Tipo.DETENER);}
}

Instruccion Continuar():
{Instruccion e;}
{
    <CONTINUAR> <PCOMA> {return new Continuar(Tipo.DETENER);}
}

Instruccion Si():
{
    Instruccion e; ArrayList<Instruccion> cuerpoSi = new ArrayList<Instruccion>();
    ArrayList<Instruccion> cuerpoElse = new ArrayList<Instruccion>();
}
{
    <SI> <PARIZ> e = Expresion() <PARDE> cuerpoSi = BloqueSi()
        ( <SINO> cuerpoElse = BloqueSi())?
        {return new Si(Tipo.SI, e, cuerpoSi, cuerpoElse, token.beginLine, token.beginColumn);}
}

ArrayList<Instruccion> BloqueSi():
{ArrayList<Instruccion> instrucciones = new ArrayList<Instruccion>(); Instruccion e;}
{
  <LLAVE_I> (e=InstruccionSi() {instrucciones.add(e);})* <LLAVE_D> {return instrucciones;}
}

Instruccion InstruccionSi() :
{Instruccion e;}
{
    e = Declaracion() {return e;}
    | e = Imprimir() {return e;}
    | e = Asignacion() {return e;}
    | e = Retorno() {return e;}
    | e = Si() {return e;}   
    | e = Para() {return e;} 
    | e = Mientras() {return e;}
    | e = Detener() {return e;}
    | e = Continuar() {return e;}
}


Instruccion Funcion():
{Token id; ArrayList<Instruccion> instrucciones; ArrayList<Declaracion> declaraciones; Tipo tipo;}
{
    <FUNCION> tipo = FuncionTipo() id = <IDENTIFICADOR> <PARIZ> declaraciones = ListaParametros() <PARDE> instrucciones = Bloque() 
    {return new Funcion(Tipo.FUNCION, id.image, declaraciones, instrucciones, tipo, id.beginLine, id.beginColumn);}
}

ArrayList<Instruccion> Bloque():
{ArrayList<Instruccion> instrucciones = new ArrayList<Instruccion>(); Instruccion e;}
{
  <LLAVE_I> (e=InstruccionFuncion() {instrucciones.add(e);})* <LLAVE_D> {return instrucciones;}
}

ArrayList<Declaracion> ListaParametros() :
{ArrayList<Declaracion> lista = new ArrayList<Declaracion>(); Declaracion e; Tipo t; Token id;}
{
    (
        t=Tipo() id=<IDENTIFICADOR> {lista.add(new Declaracion(Tipo.DECLARACION,id.image, null, t, id.beginLine, id.beginColumn));}
        (
            <COMA> t=Tipo() id=<IDENTIFICADOR> {lista.add(new Declaracion(Tipo.DECLARACION,id.image, null, t, id.beginLine, id.beginColumn));}
        )*
    )?
    {return lista;}
}

Instruccion Imprimir() :
{Instruccion e;}
{
    <IMPRIMIR> <PARIZ> e=Expresion() <PARDE> <PCOMA> {return new Imprimir(Tipo.IMPRIMIR, e,token.beginLine, token.beginColumn);}
}

Instruccion Asignacion():
{Instruccion e; Token id; ArrayList<Instruccion> lista = new ArrayList<Instruccion>();}
{
    id = <IDENTIFICADOR> 
        (
            <PARIZ> lista = Lista_Expresiones() <PARDE> <PCOMA>
            {
                return new Llamada(Tipo.LLAMADA, id.image, lista, id.beginLine, id.beginColumn); 
            }
        )?
    <IGUAL> e = Expresion() <PCOMA> {return new Asignacion(Tipo.ASIGNACION, id.image, e, id.beginLine, id.beginColumn);}
}

Instruccion Declaracion():
{Tipo t; Token tok; Instruccion e = null;}
{
    t = Tipo() tok = <IDENTIFICADOR> (<IGUAL> e = Expresion())? <PCOMA> {return new Declaracion(Tipo.DECLARACION,tok.image, e, t, tok.beginLine, tok.beginColumn);}
}

Instruccion Retorno():
{Instruccion e = null;}
{
    <RETORNO> ( e = Expresion() )? <PCOMA> {return new Retorno(Tipo.RETORNO, e, token.beginLine, token.beginColumn);}
}

Tipo FuncionTipo() :
{}
{
    <INT> {return Tipo.ENTERO;}
    | <DOUBLE> {return Tipo.DECIMAL;}
    | <CADENA> {return Tipo.CADENA;}
    | <BOOLEAN> {return Tipo.BOOLEAN;}
    | <VOID> {return Tipo.VOID;}
}


Tipo Tipo() :
{}
{
    <INT> {return Tipo.ENTERO;}
    | <DOUBLE> {return Tipo.DECIMAL;}
    | <CADENA> {return Tipo.CADENA;}
    | <BOOLEAN> {return Tipo.BOOLEAN;}
}

ArrayList<Instruccion> Lista_Expresiones() :
{ArrayList<Instruccion> lista = new ArrayList<Instruccion>(); Instruccion e;}
{
    (
        e=Expresion() {lista.add(e);}
        (
            <COMA> e=Expresion() {lista.add(e);}
        )*
    )?
    {return lista;}
}

Instruccion Expresion() :
{Instruccion e, e1;}
{
    e = And() 
    ( 
        <OR> e1 = And() {e = new Logica(Tipo.LOGICA, e, e1, Tipo.OR, token.beginLine, token.beginColumn);}
    )*
    {return e;}
}

Instruccion And() :
{Instruccion e, e1;}
{
    e = ExpresionIgual() 
    ( 
        <AND> e1 = ExpresionIgual() {e = new Logica(Tipo.LOGICA, e, e1, Tipo.AND, token.beginLine, token.beginColumn);}
    )*
    {return e;}
}

Instruccion ExpresionIgual() :
{Instruccion e, e1;}
{
    e = ExpresionRelacional() 
    (
        <IGUALACION> e1 = ExpresionRelacional() {e = new Relacional(Tipo.RELACIONAL, e, e1, Tipo.IGUAL, token.beginLine, token.beginColumn);}
        | <DIFERENCIACION> e1 = ExpresionRelacional() {e = new Relacional(Tipo.RELACIONAL, e, e1, Tipo.DIFERENTE, token.beginLine, token.beginColumn);}
    )*
    {return e;}
}

Instruccion ExpresionRelacional() :
{Instruccion e, e1;}
{
    e = ExpresionAditiva()
    (
        <MAYORQUE> e1 = ExpresionAditiva() {e = new Relacional(Tipo.RELACIONAL, e, e1, Tipo.MAYOR, token.beginLine, token.beginColumn);}
        | <MENORQUE> e1 = ExpresionAditiva() {e = new Relacional(Tipo.RELACIONAL, e, e1, Tipo.MENOR, token.beginLine, token.beginColumn);}
        | <MAYORIGUAL> e1 = ExpresionAditiva() {e = new Relacional(Tipo.RELACIONAL, e, e1, Tipo.MAYORIGUAL, token.beginLine, token.beginColumn);}
        | <MENORIGUAL> e1 = ExpresionAditiva() {e = new Relacional(Tipo.RELACIONAL, e, e1, Tipo.MENORIGUAL, token.beginLine, token.beginColumn);}
    )*
    {return e;}
}

Instruccion ExpresionAditiva() :
{Instruccion e, e1;}
{
    e =ExpresionMultiplicativa()
    (
        <MAS> e1 = ExpresionMultiplicativa() {e = new Operacion(Tipo.OPERACION, e, e1, Tipo.SUMA, token.beginLine, token.beginColumn);}
        | <MENOS> e1 = ExpresionMultiplicativa() {e = new Operacion(Tipo.OPERACION, e, e1, Tipo.RESTA, token.beginLine, token.beginColumn);}
    )* 
    {return e;}
}

Instruccion ExpresionMultiplicativa() :
{Instruccion e, e1;}
{
    e =ExpresionUnaria()
    (
        <POR> e1 = ExpresionUnaria() {e = new Operacion(Tipo.OPERACION, e, e1, Tipo.MULTIPLICACION, token.beginLine, token.beginColumn);}
        | <DIV> e1 =ExpresionUnaria() {e = new Operacion(Tipo.OPERACION, e, e1, Tipo.DIVISION, token.beginLine, token.beginColumn);}
    )*
    {return e;}
}

Instruccion ExpresionUnaria() :
{Instruccion e;}
{
    <MENOS> e = Primitivo() {return new Operacion(Tipo.OPERACION,  e, null, Tipo.MENOS, token.beginLine, token.beginColumn);}
    | <NOT> e = Primitivo() {return new Logica(Tipo.LOGICA,  e, null, Tipo.NOT, token.beginLine, token.beginColumn);}
    | e = Primitivo() {return e;}
}

Instruccion Primitivo() :
{Token t; Instruccion e = null; ArrayList<Instruccion> lista = new ArrayList<Instruccion>(); }
{
    t = <ENTERO> {return new Valor(Tipo.VALOR, t.image, Tipo.ENTERO, t.beginLine, t.beginColumn);}
    | t= <DECIMAL> {return new Valor(Tipo.VALOR, t.image, Tipo.DECIMAL, t.beginLine, t.beginColumn);}
    | t = <STRING> {return new Valor(Tipo.VALOR, t.image, Tipo.CADENA, t.beginLine, t.beginColumn);}
    | t=<TRUE> {return new Valor(Tipo.VALOR, true, Tipo.BOOLEAN, t.beginLine, t.beginColumn);}
    | t=<FALSE> {return new Valor(Tipo.VALOR, false, Tipo.BOOLEAN, t.beginLine, t.beginColumn);}
    | t=<IDENTIFICADOR> 
        (
            <PARIZ> lista = Lista_Expresiones() <PARDE> 
            {
                Llamada llamada = new Llamada(Tipo.LLAMADA, t.image, lista, t.beginLine, t.beginColumn); 
                return new Valor(Tipo.VALOR, llamada, Tipo.LLAMADA, t.beginLine, t.beginColumn);
            }
        )?
        {return new Valor(Tipo.VALOR, t.image, Tipo.IDENTIFICADOR, t.beginLine, t.beginColumn);}
    | <PARIZ>  e = Expresion() <PARDE> {return e;}
}



