/* Generated By:JavaCC: Do not edit this line. GramaticaConstants.java */
/** Analizador de expresiones aritmeticas sencillas. */
package Analizador;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GramaticaConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int ENTERO = 2;
  /** RegularExpression Id. */
  int DECIMAL = 3;
  /** RegularExpression Id. */
  int TRUE = 4;
  /** RegularExpression Id. */
  int FALSE = 5;
  /** RegularExpression Id. */
  int CADENA = 6;
  /** RegularExpression Id. */
  int INT = 7;
  /** RegularExpression Id. */
  int VOID = 8;
  /** RegularExpression Id. */
  int DOUBLE = 9;
  /** RegularExpression Id. */
  int BOOLEAN = 10;
  /** RegularExpression Id. */
  int IMPRIMIR = 11;
  /** RegularExpression Id. */
  int PARA = 12;
  /** RegularExpression Id. */
  int MIENTRAS = 13;
  /** RegularExpression Id. */
  int FUNCION = 14;
  /** RegularExpression Id. */
  int RETORNO = 15;
  /** RegularExpression Id. */
  int BREAK = 16;
  /** RegularExpression Id. */
  int CONTINUE = 17;
  /** RegularExpression Id. */
  int SI = 18;
  /** RegularExpression Id. */
  int SINO = 19;
  /** RegularExpression Id. */
  int PCOMA = 20;
  /** RegularExpression Id. */
  int PARIZ = 21;
  /** RegularExpression Id. */
  int PARDE = 22;
  /** RegularExpression Id. */
  int CORI = 23;
  /** RegularExpression Id. */
  int CORD = 24;
  /** RegularExpression Id. */
  int LLAVE_I = 25;
  /** RegularExpression Id. */
  int LLAVE_D = 26;
  /** RegularExpression Id. */
  int MAS = 27;
  /** RegularExpression Id. */
  int MENOS = 28;
  /** RegularExpression Id. */
  int POR = 29;
  /** RegularExpression Id. */
  int DIV = 30;
  /** RegularExpression Id. */
  int IGUAL = 31;
  /** RegularExpression Id. */
  int MENORQUE = 32;
  /** RegularExpression Id. */
  int MAYORQUE = 33;
  /** RegularExpression Id. */
  int MENORIGUAL = 34;
  /** RegularExpression Id. */
  int MAYORIGUAL = 35;
  /** RegularExpression Id. */
  int IGUALACION = 36;
  /** RegularExpression Id. */
  int DIFERENCIACION = 37;
  /** RegularExpression Id. */
  int COMA = 38;
  /** RegularExpression Id. */
  int AND = 39;
  /** RegularExpression Id. */
  int OR = 40;
  /** RegularExpression Id. */
  int NOT = 41;
  /** RegularExpression Id. */
  int INCREMENTO = 42;
  /** RegularExpression Id. */
  int DECREMENTO = 43;
  /** RegularExpression Id. */
  int IDENTIFICADOR = 44;
  /** RegularExpression Id. */
  int STRING = 53;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int STRING_STATE = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"\\\"\"",
    "<ENTERO>",
    "<DECIMAL>",
    "\"true\"",
    "\"false\"",
    "\"Cadena\"",
    "\"Int\"",
    "\"Void\"",
    "\"Double\"",
    "\"Boolean\"",
    "\"Imprimir\"",
    "\"Para\"",
    "\"Mientras\"",
    "\"Funcion\"",
    "\"Return\"",
    "\"Break\"",
    "\"continue\"",
    "\"Si\"",
    "\"Sino\"",
    "\";\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"==\"",
    "\"!=\"",
    "\",\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"++\"",
    "\"--\"",
    "<IDENTIFICADOR>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "<token of kind 49>",
    "<token of kind 50>",
    "<token of kind 51>",
    "<token of kind 52>",
    "\"\\\"\"",
  };

}
